// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.13.0
// source: student/v1/error_reason.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ErrorReason_CreateErrorReason_FullMethodName = "/api.student.v1.ErrorReason/CreateErrorReason"
	ErrorReason_UpdateErrorReason_FullMethodName = "/api.student.v1.ErrorReason/UpdateErrorReason"
	ErrorReason_DeleteErrorReason_FullMethodName = "/api.student.v1.ErrorReason/DeleteErrorReason"
	ErrorReason_GetErrorReason_FullMethodName    = "/api.student.v1.ErrorReason/GetErrorReason"
	ErrorReason_ListErrorReason_FullMethodName   = "/api.student.v1.ErrorReason/ListErrorReason"
)

// ErrorReasonClient is the client API for ErrorReason service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorReasonClient interface {
	CreateErrorReason(ctx context.Context, in *CreateErrorReasonRequest, opts ...grpc.CallOption) (*CreateErrorReasonReply, error)
	UpdateErrorReason(ctx context.Context, in *UpdateErrorReasonRequest, opts ...grpc.CallOption) (*UpdateErrorReasonReply, error)
	DeleteErrorReason(ctx context.Context, in *DeleteErrorReasonRequest, opts ...grpc.CallOption) (*DeleteErrorReasonReply, error)
	GetErrorReason(ctx context.Context, in *GetErrorReasonRequest, opts ...grpc.CallOption) (*GetErrorReasonReply, error)
	ListErrorReason(ctx context.Context, in *ListErrorReasonRequest, opts ...grpc.CallOption) (*ListErrorReasonReply, error)
}

type errorReasonClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorReasonClient(cc grpc.ClientConnInterface) ErrorReasonClient {
	return &errorReasonClient{cc}
}

func (c *errorReasonClient) CreateErrorReason(ctx context.Context, in *CreateErrorReasonRequest, opts ...grpc.CallOption) (*CreateErrorReasonReply, error) {
	out := new(CreateErrorReasonReply)
	err := c.cc.Invoke(ctx, ErrorReason_CreateErrorReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorReasonClient) UpdateErrorReason(ctx context.Context, in *UpdateErrorReasonRequest, opts ...grpc.CallOption) (*UpdateErrorReasonReply, error) {
	out := new(UpdateErrorReasonReply)
	err := c.cc.Invoke(ctx, ErrorReason_UpdateErrorReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorReasonClient) DeleteErrorReason(ctx context.Context, in *DeleteErrorReasonRequest, opts ...grpc.CallOption) (*DeleteErrorReasonReply, error) {
	out := new(DeleteErrorReasonReply)
	err := c.cc.Invoke(ctx, ErrorReason_DeleteErrorReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorReasonClient) GetErrorReason(ctx context.Context, in *GetErrorReasonRequest, opts ...grpc.CallOption) (*GetErrorReasonReply, error) {
	out := new(GetErrorReasonReply)
	err := c.cc.Invoke(ctx, ErrorReason_GetErrorReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorReasonClient) ListErrorReason(ctx context.Context, in *ListErrorReasonRequest, opts ...grpc.CallOption) (*ListErrorReasonReply, error) {
	out := new(ListErrorReasonReply)
	err := c.cc.Invoke(ctx, ErrorReason_ListErrorReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorReasonServer is the server API for ErrorReason service.
// All implementations must embed UnimplementedErrorReasonServer
// for forward compatibility
type ErrorReasonServer interface {
	CreateErrorReason(context.Context, *CreateErrorReasonRequest) (*CreateErrorReasonReply, error)
	UpdateErrorReason(context.Context, *UpdateErrorReasonRequest) (*UpdateErrorReasonReply, error)
	DeleteErrorReason(context.Context, *DeleteErrorReasonRequest) (*DeleteErrorReasonReply, error)
	GetErrorReason(context.Context, *GetErrorReasonRequest) (*GetErrorReasonReply, error)
	ListErrorReason(context.Context, *ListErrorReasonRequest) (*ListErrorReasonReply, error)
	mustEmbedUnimplementedErrorReasonServer()
}

// UnimplementedErrorReasonServer must be embedded to have forward compatible implementations.
type UnimplementedErrorReasonServer struct {
}

func (UnimplementedErrorReasonServer) CreateErrorReason(context.Context, *CreateErrorReasonRequest) (*CreateErrorReasonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateErrorReason not implemented")
}
func (UnimplementedErrorReasonServer) UpdateErrorReason(context.Context, *UpdateErrorReasonRequest) (*UpdateErrorReasonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateErrorReason not implemented")
}
func (UnimplementedErrorReasonServer) DeleteErrorReason(context.Context, *DeleteErrorReasonRequest) (*DeleteErrorReasonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteErrorReason not implemented")
}
func (UnimplementedErrorReasonServer) GetErrorReason(context.Context, *GetErrorReasonRequest) (*GetErrorReasonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrorReason not implemented")
}
func (UnimplementedErrorReasonServer) ListErrorReason(context.Context, *ListErrorReasonRequest) (*ListErrorReasonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListErrorReason not implemented")
}
func (UnimplementedErrorReasonServer) mustEmbedUnimplementedErrorReasonServer() {}

// UnsafeErrorReasonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorReasonServer will
// result in compilation errors.
type UnsafeErrorReasonServer interface {
	mustEmbedUnimplementedErrorReasonServer()
}

func RegisterErrorReasonServer(s grpc.ServiceRegistrar, srv ErrorReasonServer) {
	s.RegisterService(&ErrorReason_ServiceDesc, srv)
}

func _ErrorReason_CreateErrorReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateErrorReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorReasonServer).CreateErrorReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorReason_CreateErrorReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorReasonServer).CreateErrorReason(ctx, req.(*CreateErrorReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorReason_UpdateErrorReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateErrorReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorReasonServer).UpdateErrorReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorReason_UpdateErrorReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorReasonServer).UpdateErrorReason(ctx, req.(*UpdateErrorReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorReason_DeleteErrorReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteErrorReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorReasonServer).DeleteErrorReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorReason_DeleteErrorReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorReasonServer).DeleteErrorReason(ctx, req.(*DeleteErrorReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorReason_GetErrorReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetErrorReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorReasonServer).GetErrorReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorReason_GetErrorReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorReasonServer).GetErrorReason(ctx, req.(*GetErrorReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorReason_ListErrorReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListErrorReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorReasonServer).ListErrorReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErrorReason_ListErrorReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorReasonServer).ListErrorReason(ctx, req.(*ListErrorReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrorReason_ServiceDesc is the grpc.ServiceDesc for ErrorReason service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrorReason_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.student.v1.ErrorReason",
	HandlerType: (*ErrorReasonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateErrorReason",
			Handler:    _ErrorReason_CreateErrorReason_Handler,
		},
		{
			MethodName: "UpdateErrorReason",
			Handler:    _ErrorReason_UpdateErrorReason_Handler,
		},
		{
			MethodName: "DeleteErrorReason",
			Handler:    _ErrorReason_DeleteErrorReason_Handler,
		},
		{
			MethodName: "GetErrorReason",
			Handler:    _ErrorReason_GetErrorReason_Handler,
		},
		{
			MethodName: "ListErrorReason",
			Handler:    _ErrorReason_ListErrorReason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student/v1/error_reason.proto",
}
